snippet defser "GenServer Worker" b
defmodule ${1:TestModule} do
  use GenServer

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def init(state) do
    {:ok, state}
  end

  #
  # API
  #

  def ${2:func} do
    GenServer.$3(__MODULE__, ${4:atom})
  end

  #
  # Callbacks
  #

  def handle_$3($4, _from, state) do
    Logger.debug(fn -> "#{inspect state}" end)
    {:reply, ${5::ok}, ${6:state}}
  end

  #
  # Private
  #

end
endsnippet

snippet defsup "GenServer Supervisor" b
defmodule ${1:ModuleName}.${2:Supervisor} do
  use Supervisor

  def start_link(opts \\ []) do
    Supervisor.start_link(__MODULE__, :ok, opts)
  end

  def init(:ok) do
    children = [
      {${3:$1}.${4:Worker}, []}
    ]

    opts = [strategy: ${5::one_for_one}]
    Supervisor.init(children, opts)
  end
end
endsnippet

snippet defapp "GenServer Application" b
defmodule ${1:ModuleName} do
  use Application

  def start(_type, _args) do
    ${2:$1}.${3:Supervisor}.start_link()
  end

end
endsnippet

snippet regpubsub "Registry PubSub" b
{:ok, _} = Registry.start_link(keys: :duplicate, name: ${1:PubSubTest},
                               partitions: System.schedulers_online())
{:ok, _} = Registry.register($1, ${2:topic}, [])
Registry.dispatch($1, $2, fn entries ->
  for {pid, _} <- entries, do: send(pid, {:broadcast, ${3:message}})
end)
endsnippet
